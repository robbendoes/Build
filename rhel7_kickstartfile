# Kickstart config file generated by Red Hat Satellite Config Management
# Profile Label : rhel-x86_64-server-7
# Date Created  : 2017-06-01 07:48:48.93035

install
text
network --bootproto=dhcp --noipv6
url --url http://blabla.bla/ks/dist/ks-rhel-x86_64-server-7-7.3
lang en_US
keyboard us
zerombr
clearpart --all
bootloader --location mbr --append="net.ifnames=0 biosdevname=0 crashkernel=auto"  --iscrypted --password=grub.pbkdf2.sha512.10000.createyourown:-) audit=1
timezone --utc Europe/Amsterdam
auth --enableshadow --passalgo=sha256
rootpw --iscrypted $5$blabla.bla.blabla.bla
selinux --enforcing
reboot
firewall --disabled
skipx
repo --name=rhn-tools-rhel-x86_64-server-7 --baseurl=http://blabla.bla/ks/dist/child/rhn-tools-rhel-x86_64-server-7/ks-rhel-x86_64-server-7-7.3
repo --name=base-puppet-el7 --baseurl=http://blabla.bla/ks/dist/child/base-puppet-el7/ks-rhel-x86_64-server-7-7.3
repo --name=base-epel-el7 --baseurl=http://blabla.bla/ks/dist/child/base-epel-el7/ks-rhel-x86_64-server-7-7.3
%include /tmp/partitions

%packages 
@ Base
osad
aide
rhn-client-tools
rhn-custom-info
rhncfg
rhncfg-actions
nc
rhncfg-management
rhncfg-client
rhn-check
rhnmd
sssd-client.x86_64
compat-openldap.x86_64
curl.x86_64
cyrus-sasl.x86_64
cyrus-sasl-gssapi.x86_64
dstat.noarch
expect.x86_64
e2fsprogs.x86_64
iproute.x86_64
keyutils.x86_64
krb5-libs.x86_64
krb5-workstation.x86_64
nss-pam-ldapd.x86_64
ntp.x86_64
oddjob.x86_64
openldap-clients.x86_64
openldap.x86_64
openssh.x86_64
openssh-clients.x86_64
openssh-server.x86_64
openssl.x86_64
pam_krb5.x86_64
postfix.x86_64
rsyslog
screen.x86_64
sg3_utils.x86_64
sssd.x86_64
sudo.x86_64
sysstat.x86_64
lsscsi.x86_64
tree.x86_64
vim-common.x86_64
vim-enhanced.x86_64
vim-minimal.x86_64
wget.x86_64
xorg-x11-xauth.x86_64
yum-plugin-protect-packages
yum-plugin-versionlock.noarch
-Deployment_Guide-en-US
-bluez-gnome
-bluez-libs
-bluez-utils
-bluez-utils-cups
-cups
-dhcpv6-client
-firstboot-tui
-htmlview
-irda-utils
-isdn4k-utils
-krb5-libs.i686
-logwatch
-pcmciautils
-ppp
-rp-pppoe
-sendmail
-ypbind
-yp-tools
-zlib.i686
%end

%pre

wget "http://blabla.bla/cblr/svc/op/trig/mode/pre/profile/rhel-x86_64-server-7" -O /dev/null

echo "Saving RHN keys..." > /dev/ttyS0
SYSTEM_ID=/etc/sysconfig/rhn/systemid
rhn_keys_found=no

mkdir -p /tmp/rhn

drives=$(list-harddrives | awk '{print $1}')
for disk in $drives; do
    DISKS="$DISKS $(fdisk -l /dev/$disk | grep -v "swap\|LVM\|Extended" | awk '/^\/dev/{print $1}')"
done

# Try to find the keys on ordinary partitions
for disk in $DISKS; do
    name=test-$(basename $disk)
    mkdir -p /tmp/$name
    mount $disk /tmp/$name
    [ $? -eq 0 ] || continue # Skip to the next partition if the mount fails

    # Copy current RHN host keys out to be reused
    if [ -f /tmp/${name}$SYSTEM_ID ]; then
        cp -a /tmp/${name}$SYSTEM_ID /tmp/rhn
        rhn_keys_found="yes"
        umount /tmp/$name
        break
    fi
    umount /tmp/$name
    rm -r /tmp/$name
done

# Try LVM if that didn't work
if [ "$rhn_keys_found" = "no" ]; then
    lvm lvmdiskscan
    vgs=$(lvm vgs | tail -n +2 | awk '{ print $1 }')
    for vg in $vgs; do
        # Activate any VG we found
        lvm vgchange -ay $vg
    done
    
    lvs=$(lvm lvs | tail -n +2 | awk '{ print "/dev/" $2 "/" $1 }')
    for lv in $lvs; do
        tmpdir=$(mktemp -d findkeys.XXXXXX)
        mkdir -p /tmp/${tmpdir}
        mount $lv /tmp/${tmpdir} || continue # Skip to next volume if this fails

        # Let's see if the keys are in there
        if [ -f /tmp/${tmpdir}$SYSTEM_ID ]; then
            cp -a /tmp/${tmpdir}$SYSTEM_ID /tmp/rhn/
            rhn_keys_found="yes"
            umount /tmp/${tmpdir}
            break # We're done!
        fi
        umount /tmp/${tmpdir}
        rm -r /tmp/${tmpdir}
    done
    
    # And clean up..
    for vg in $vgs; do
        lvm vgchange -an $vg
    done
fi


%end

%pre --log /tmp/ks-pre.log.1
echo "snipp-windows6"
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6
echo "end snipp-windows6"

IP_SATELLITE=$(cat /proc/cmdline | sed 's/.* ks=[^:]*:\/\/\([^/]*\).*/\1/')

wget -O /tmp/dialog http://${IP_SATELLITE}/pub/install/dialog
chmod 755 /tmp/dialog

wget -O /tmp/curl http://${IP_SATELLITE}/pub/install/curl
chmod 755 /tmp/curl

#wget -O /tmp/securedownload.py http://${IP_SATELLITE}/pub/install/securedownload.py
#chmod 755 /tmp/securedownload.py

#wget -O /tmp/securedownload-AD.py http://${IP_SATELLITE}/pub/install/securedownload-AD.py
#chmod 755 /tmp/securedownload-AD.py


echo "snipp-bash-functions"
rawurlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"    # You can either set a return variable (FASTER) 
  REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}
echo "end snipp-bash-functions"


echo "snipp-configure-network-ims-el7"
echo "1" > /proc/sys/net/ipv4/conf/all/arp_ignore
HNAME=""
CONFIRM="1"     
BOOTMAC=$(cat /proc/cmdline | sed 's/.*BOOTIF=...\([^ ]*\).*/\1/' | sed 's/-/:/g')
BOOTIF=$(ip l | grep -B1 ${BOOTMAC} | grep eth[[:digit:]] | awk '{print $2}' | sed 's/:$//')
echo "BOOTIF='${BOOTIF}'" > /tmp/.pre-network

IP_SATELLITE=$(cat /proc/cmdline | sed 's/.* ks=[^:]*:\/\/\([^/]*\).*/\1/')
DMZ=0
                        
function CheckInterface {       
        MyIP=$1         
        GW=$2                   
        IF=$3                           
	CIDR=$4
	BROADCAST=$5
                                        
        ip addr flush "${IF}"           
        ip addr add "${MyIP}/${CIDR}" broadcast "${BROADCAST}" dev "${IF}"
        ip link set "${IF}" up          
        sleep 5                 
        arping -c1 -I "${IF}" "${GW}" | grep -q '^Received [1-9][0-9]* response'
        RV=$?                  
        if [ "${RV}" == "0" ]; then
		arping -c1 -I "${IF}" -D "$MyIP" &>/dev/null
		RV=$?
		if [ "$RV" != "0" ]; then
        		ip addr flush "${IF}"           
			RV=1
		fi
        else
        	ip addr flush "${IF}"           
		RV=2
        fi
	# RV 0 = found, no dup !
	# RV 1 = duplicate
	# RV 2 = not found
        return $RV
}

                
while [ "${CONFIRM}" == "1" ]; do
        /tmp/dialog     --ok-label "Next" \
                --no-cancel \
                --title "Pre Configuration" \
                --form "Network" 15 50 0 \
                "Hostname : " 1 1 "${HNAME}" 1 13 13 0 2>/tmp/.pre-hostname
                
        HNAME=$(cat /tmp/.pre-hostname | sed 's/\(.*\)/\L\1/g')
	unset SRVIP SRVLN SRV_VLAN SRV_VLAN_NAME SRV_NETWORK SRV_CIDR SRV_NETMASK SRVGW MGTIP MGTLN MGT_VLAN MGT_VLAN_NAME MGT_NETWORK MGT_CIDR MGT_NETMASK MGTGW
	clear
	echo "Checking DNS for ${HNAME}.blabla... "
		# Resolve hostname to IP, should only return 1 IP
		nslookup ${HNAME}.blabla.bla 2>/dev/null | tail -n+4 | grep ^Address > /tmp/nslookup
		if [ "$(wc -l /tmp/nslookup | awk '{print $1}')" != "1" ]; then
			echo "Error, DNS is not configured properly"
			echo "Lookup of ${HNAME}, does not resolve to 1 ip-address:"
			nslookup ${HNAME}.blabla.bla
			read
			continue
		fi
		SRVIP=$(cat /tmp/nslookup | awk '{print $2}')

		#Resolve IP to hostname, should return this hostname
		nslookup ${SRVIP} | tail -n+4 |  grep 'name = ' > /tmp/nslookup
		if [ "$(wc -l /tmp/nslookup | awk '{print $1}')" != "1" ]; then
			echo "Error, DNS is not configured properly"
			echo "Reverse lookup of the ip ${SRVIP} does not return 1 hostname:"
			nslookup ${SRVIP}
			read
			continue
		fi

		SRVPTR=$(cat /tmp/nslookup | awk '{print $4}')
		if [ "$SRVPTR" != "${HNAME}.blabla.bla." ]; then
			echo "Error, DNS is not configured properly"
			echo "Reverse lookup of ${SRVIP} does not return ${HNAME}.blabla.bla:"
			nslookup ${SRVIP}
			read
			continue
		fi
	echo "Congratulations, DNS is aproved for ${HNAME}.blabla.bla ( = ${SRVIP} )"
	echo
	
	echo "Checking DNS for ${HNAME}.mgt.blabla.bla"
		# Resolve hostname to IP, should only return 1 IP
		nslookup ${HNAME}.mgt.blabla.bla 2>/dev/null | tail -n+4 | grep ^Address > /tmp/nslookup
		if [ "$(wc -l /tmp/nslookup | awk '{print $1}')" != "0" ]; then
			if [ "$(wc -l /tmp/nslookup | awk '{print $1}')" != "1" ]; then
				echo "Error, DNS is not configured properly"
				echo "Lookup of ${HNAME}, does not resolve to 1 ip-address:"
				nslookup ${HNAME}.mgt.blabla.bla
				read
				continue
			fi
			MGTIP=$(cat /tmp/nslookup | awk '{print $2}')
	
			#Resolve IP to hostname, should return this hostname
			nslookup ${MGTIP} | tail -n+4 | grep 'name = ' > /tmp/nslookup
			if [ "$(wc -l /tmp/nslookup | awk '{print $1}')" != "1" ]; then
				echo "Error, DNS is not configured properly"
				echo "Reverse lookup of the ip ${MGTIP} does not return 1 hostname:"
				nslookup ${MGTIP}
				read
				continue
			fi

			MGTPTR=$(cat /tmp/nslookup | awk '{print $4}')
			if [ "$MGTPTR" != "${HNAME}.mgt.blabla.bla." ]; then
				echo "Error, DNS is not configured properly"
				echo "Reverse lookup of ${MGTIP} does not return ${HNAME}.mgt.blabla.bla:"
				nslookup ${MGTIP}
				read
				continue
			fi
			echo "Congratulations, DNS is aproved for ${HNAME}.mgt.blabla.bla (= ${MGTIP})"
		else
			echo "No management interface..."
		fi
	echo

	if [ -z "${SRVIP}" ]; then
		/tmp/dialog --msgbox "Could not resolve '${HNAME}', please check DNS" 15 50
		continue
	fi

	SRVLN=$(curl -# "http://${IP_SATELLITE}/pub/install/getvlan.php?ip=${SRVIP}")
	SRV_VLAN=$(echo $SRVLN | awk -F: '{print $1}')
	SRV_VLAN_NAME=$(echo $SRVLN | awk -F: '{print $2}')
	SRV_NETWORK=$(echo $SRVLN | awk -F: '{print $3}')
	SRV_CIDR=$(echo $SRVLN | awk -F: '{print $4}')
	SRV_NETMASK=$(echo $SRVLN | awk -F: '{print $5}')
	SRVGW=$(echo $SRVLN | awk -F: '{print $6}')
	SRVBROADCAST=$(echo $SRVLN | awk -F: '{print $7}')

	if [ -z "$SRV_CIDR" ]; then
		/tmp/dialog --msgbox "Could not retrieve VLAN information !\nInstallation cannot continue" 15 50
		continue
	fi

	echo "Server network:"
	echo "------------------------------"
	echo "IP       : ${SRVIP}"
	echo "VLAN     : ${SRV_VLAN}"
	echo "VLAN Name: ${SRV_VLAN_NAME}"
	echo "Network  : ${SRV_NETWORK}"
	echo "Netmask  : ${SRV_NETMASK} ($SRV_CIDR)"
	echo "Broadcast: ${SRVBROADCAST}"
	echo "Gateway  : ${SRVGW}"
	
	> /tmp/.pre-srvif
	ip l | grep eth[[:digit:]] | awk '{print $2}' | sed 's/:$//' | grep -v "${BOOTIF}" | while read IF; do
		echo -n "$IF     : "
		CheckInterface "$SRVIP" "$SRVGW" "$IF" "$SRV_CIDR" "$SRVBROADCAST"
		RVAL=$?
		case "$RVAL" in
			0)
				echo "${IF}" >> /tmp/.pre-srvif
				echo -e '[ \e[0;92mFound\e[0m ]'
				;;
			1)
				# If /tmp/.pre-srvif is a non-zero file then duplicate is allowed (2nd interface gets a duplicate, bonding, physical)
				if [ -s /tmp/.pre-srvif ]; then
					echo "${IF}" >> /tmp/.pre-srvif
				fi
				echo -e '[ \e[0;91mDuplicate\e[0m ]'
				;;
			2)
				echo -e '[ \e[0;93mNot Found\e[0m ]'
		esac
	done


	if [ -n "${MGTIP}" ]; then
		MGTLN=$(curl -# "http://${IP_SATELLITE}/pub/install/getvlan.php?ip=${MGTIP}")
		MGT_VLAN=$(echo $MGTLN | awk -F: '{print $1}')
		MGT_VLAN_NAME=$(echo $MGTLN | awk -F: '{print $2}')
		MGT_NETWORK=$(echo $MGTLN | awk -F: '{print $3}')
		MGT_CIDR=$(echo $MGTLN | awk -F: '{print $4}')
		MGT_NETMASK=$(echo $MGTLN | awk -F: '{print $5}')
		MGTGW=$(echo $MGTLN | awk -F: '{print $6}')
		MGTBROADCAST=$(echo $MGTLN | awk -F: '{print $7}')
		echo
		echo "Management network:"
		echo "------------------------------"
		echo "IP       : ${MGTIP}"
		echo "VLAN     : ${MGT_VLAN}"
		echo "VLAN Name: ${MGT_VLAN_NAME}"
		echo "Network  : ${MGT_NETWORK}"
		echo "Netmask  : ${MGT_NETMASK} (${MGT_CIDR})"
		echo "Broadcast: ${MGTBROADCAST}"
		echo "Gateway  : ${MGTGW}"
	
		> /tmp/.pre-mgtif
		ip l | grep eth[[:digit:]] | awk '{print $2}' | sed 's/:$//' | grep -v "${BOOTIF}" | grep -v -f /tmp/.pre-srvif | while read IF; do
			echo -n "$IF     : "
			CheckInterface "$MGTIP" "$MGTGW" "$IF" "$MGT_CIDR" "$MGTBROADCAST"
			RVAL=$?
			case "$RVAL" in
				0)
					echo "${IF}" >> /tmp/.pre-mgtif
					echo -e '[ \e[0;92mFound\e[0m ]'
					;;
				1)
					# If /tmp/.pre-mgtif is a non-zero file then duplicate is allowed (2nd interface gets a duplicate, bonding, physical)
					if [ -s /tmp/.pre-mgtif ]; then
						echo "${IF}" >> /tmp/.pre-mgtif
					fi
					echo -e '[ \e[0;91mDuplicate\e[0m ]'
					;;
				2)
					echo -e '[ \e[0;93mNot Found\e[0m ]'
			esac
		done
	fi

	if [ -z "$(cat /tmp/.pre-srvif)" ]; then
		echo
		echo "-------------------------------------------------"
		echo "Could not find any server interface, please check above and press enter to retry again"
		read -s
		continue
	fi
	if [ -n "${MGTIP}" ]; then
		if [ -z "$(cat /tmp/.pre-mgtif)" ]; then
			echo
			echo "-------------------------------------------------"
			echo "Could not find any management interface, please check above and press enter to retry again"
			read -s
			continue
		fi
	fi
	echo "HNAME='${HNAME}'" >> /tmp/.pre-network
	echo "SRVIP='${SRVIP}'" >> /tmp/.pre-network
	echo "SRVMSK='${SRV_CIDR}'" >> /tmp/.pre-network
	echo "SRVGW='${SRVGW}'" >> /tmp/.pre-network
	echo "SRVNETMASK='${SRV_NETMASK}'" >> /tmp/.pre-network
	echo "SRVNETWORK='${SRV_NETWORK}'" >> /tmp/.pre-network
	echo "SRVBROADCAST='${SRVBROADCAST}'" >> /tmp/.pre-network
	echo "DMZ='${DMZ}'" >> /tmp/.pre-network

	if [ -n "${MGTIP}" ]; then
		echo "MGTIP='${MGTIP}'" >> /tmp/.pre-network
		echo "MGTMSK='${MGT_CIDR}'" >> /tmp/.pre-network
		echo "MGTGW='${MGTGW}'" >> /tmp/.pre-network
		echo "MGTNETMASK='${MGT_NETMASK}'" >> /tmp/.pre-network
		echo "MGTWORK='1'" >> /tmp/.pre-network
		echo "MGTNETWORK='${MGT_NETWORK}'" >> /tmp/.pre-network
		echo "MGTBROADCAST='${MGTBROADCAST}'" >> /tmp/.pre-network
	fi
	CONFIRM=0
done
echo "IP_SATELLITE='${IP_SATELLITE}'" >> /tmp/.pre-network
echo "DMZ='${DMZ}'" >> /tmp/.pre-network
if [ -n "$(dmidecode | grep VMware)" ]; then
	echo "HARDWARE='VMWARE'" >> /tmp/.pre-network
else
	echo "HARDWARE='PHYSICAL'" >> /tmp/.pre-network
fi

echo "MGTIF='$(cat /tmp/.pre-mgtif 2>/dev/null | while read I; do echo -n "$I,"; done | sed 's/,$//')'" >> /tmp/.pre-network
echo "SRVIF='$(cat /tmp/.pre-srvif | while read I; do echo -n "$I,"; done | sed 's/,$//')'" >> /tmp/.pre-network

source /tmp/.pre-network
MGTIF=$(echo ${MGTIF} | sed 's/,.*//')

echo "Adding default route"
ip ro del default
ip ro add default via "${SRVGW}"

if [ -n "${MGTIP}" ]; then
	echo -e "\tAdding management routes"
	echo -e "\tAdding 10.10.10.0/23 route via ${MGTIF}"	echo "ADDMGTROUTE='1'" >> /tmp/.pre-network
	route add -net 10.10.10.0/23 gw "${MGTGW}"
	echo -e "\tAdding 10.10.10.0/25 route via ${MGTIF}"
	route add -net 10.10.10.0/25 gw "${MGTGW}"
else
	echo "ADDMGTROUTE='0'" >> /tmp/.pre-network
fi

echo
echo "Sleeping so network can become active..."
sleep 10
route -n
cat > /tmp/ifcfg-"${SRVIF}" << EOF
DEVICE=${SRVIF}
BOOTPROTO=static
BROADCAST=${SRVBROADCAST}
IPADDR=${SRVIP}
NETMASK=${SRV_NETMASK}
NETWORK=${SRV_NETWORK}
GATEWAY=${SRVGW}
ONBOOT=yes
DNS1=10.10.10.10
DNS2=10.10.10.10
DNS3=10.10.10.10
DNS4=10.10.10.10
EOF

cat > /tmp/ifcfg-"${MGTIF}" << EOF
DEVICE=${MGTIF}
BOOTPROTO=static
IPADDR=${MGTIP}
NETMASK=${MGT_NETMASK}
ONBOOT=yes
EOF
ip addr list
echo "Checking if Satellite is reachable...."
echo -en "${IP_SATELLITE}: \t"
#/tmp/securedownload.py "https://${IP_SATELLITE}" &>/dev/null
if ! curl -# -k "http://${IP_SATELLITE}/"  ; then
	echo "[ ERROR ]"
	echo
	echo "Could not reach the Satellite server anymore, installation cannot continue !"
	for (( i=90; i>0; i-- )); do
		echo -en "Sleeping $i seconds and give it one more try...\r"
		sleep 1
	done
	echo;
	echo "Checking if Satellite is reachable...."
	echo -en "${IP_SATELLITE}: \t"
	if ! curl -# "http://${IP_SATELLITE}/" &>/dev/null; then
		echo "[ ERROR ]"
		read -s
	fi
fi
echo "OK";

cat > /etc/resolv.conf <<EOF
options timeout:2
options attempts:2
options rotate
search insim.biz
nameserver 10.10.10.10
EOF
cp /etc/resolv.conf /tmp/

echo "* Set the hostname to ${HNAME}"
# Set the hostname directly, so that the registration in Satellite goes with a nice hostname, instead of "unknown"
#echo ${HNAME} > "/etc/hostname"
echo "end snipp-configure-network-ims-el7"
#raw end

echo "ADUSER='pamala_anderson'" >> /tmp/.pre-network
echo "ADPASSWD='bigboobies'" >> /tmp/.pre-network

echo "snipp-check-hostname"
source /tmp/.pre-network

curl -k -#  "https://${IP_SATELLITE}/pub/install/check-computer.php?hostname=${HNAME}&aduser=${ADUSER}&adpasswd=${ADPASSWD}&satip=${IP_SATELLITE}" > /tmp/checkcomputer

RESULT=$(cat /tmp/checkcomputer | tail -n1)

if [ "${RESULT}" == "AD ERROR" ]; then
	/tmp/dialog --msgbox "Host '${HNAME}' is not found in AD ! Installation cannot continue." 15 50
	reboot
fi

if [ "${RESULT}" == "SAT ERROR" ]; then
	/tmp/dialog --msgbox "Host '${HNAME}' is already found in Satellite ! Installation cannot continue. \n `cat /tmp/checkcomputer`" 15 50
	reboot
fi

if [ "${RESULT}" == "AD WARNING" ]; then
	/tmp/dialog --msgbox "Host '${HNAME}' is not found in AD ! Installation cannot continue." 15 50
fi

if [ "${RESULT}" == "SAT WARNING" ]; then
	/tmp/dialog --msgbox "Host '${HNAME}' is already found in Satellite ! Installation cannot continue." 15 50
fi
echo "end snipp-check-hostname"

source /tmp/.pre-network
echo "ACTIVATIONKEYS='1-redhat7-key'" >> /tmp/.pre-network

source /tmp/.pre-network
echo -n "* Determine swapsize..."
REALMEM=$(cat /proc/meminfo  | grep MemTotal | awk '{print int($2/1048576)+1}')

if [ "$REALMEM" -gt 8 ]; then
	REALMEM=8
fi
SWAPSIZE=$((REALMEM * 1024))
echo -e "\t(Realmemory: ${REALMEM}GB, SWAP: ${SWAPSIZE}MB"

echo "* Getting first harddisks..."
FIRSTDISK=/dev/sda

echo -e "\t- ${FIRSTDISK}"
echo "FIRSTDISK='${FIRSTDISK}'" >> /tmp/.pre-network

#Check if the first disk exists
echo "Checking if First Disk exists"
 if [ -n "${FIRSTDISK}" ]; then
			echo " Fisrt disk exists : ${FIRSTDISK}"
			continue
else
                        clear;
                        echo "ERROR: Installation cannot continue as no disk found !!!"
                        echo
                        read
                        reboot
                        while ( true ); do
                                sleep 3600
                        done
 fi

DATADISK=/dev/sdb
echo "DATADISK='${DATADISK}'" >> /tmp/.pre-network
echo "First disk is ${FIRSTDISK} and second disk is ${DATADISK}"
if [ -n "${DATADISK}" ]; then
	echo "Found datadisk: ${DATADISK}"
fi

echo "* Empty the firstdisk (${FIRSTDISK})"
dd if=/dev/zero of=/dev/${FIRSTDISK} bs=446 count=1 &>/dev/null
PARTITIONS=$(parted -s /dev/${FIRSTDISK} print | grep '^[[:space:]]*[[:digit:]]' | wc -l | awk '{print $1}')
for i in $(seq 1 ${PARTITIONS}); do
        parted -s /dev/${FIRSTDISK} "rm ${i}"
done

echo "* Creating partition layout"
cat > /tmp/partitions <<EOF
part /boot      --size=256      --fstype=ext4 --asprimary --ondisk ${FIRSTDISK}
part pv.1       --size=100      --grow --fstype=8e --ondisk ${FIRSTDISK}
volgroup vg_${HNAME} pv.1
logvol /        --size=10240    --fstype=xfs --name=lvroot --vgname=vg_${HNAME}
logvol swap     --size=${SWAPSIZE}     --fstype=swap --name=lvswap --vgname=vg_${HNAME}
logvol /home    --size=5120     --fstype=xfs --name=lvhome  --fsoptions="nodev" --vgname=vg_${HNAME}
logvol /var     --size=5120     --fstype=xfs --name=lvvar --vgname=vg_${HNAME}
logvol /var/log --size=5120     --fstype=xfs --name=lvvarlog --vgname=vg_${HNAME}
logvol /var/tmp --size=2048     --fstype=xfs --name=lvvartmp --vgname=vg_${HNAME}
logvol /tmp     --size=2048     --fstype=xfs --name=lvtmp  --fsoptions="nodev,nosuid,noexec" --vgname=vg_${HNAME}
logvol /mnt_ext --size=128      --fstype=xfs --name=lvmnt --vgname=vg_${HNAME}
EOF
echo "* Primary partition structure created"
cat /tmp/partitions
echo "* configure to create /opt on ${DATADISK}"

if [ "${HARDWARE}" == "VMWARE" ]; then
	if [ -n "${DATADISK}" ]; then
                # Make sure the datadisk is empty
                DATAPARTS=$(/bin/file -s /dev/sdb |grep PV)
                if [ $? -eq 0 ]; then
                       clear;
                      echo "ERROR: Installation cannot continue the datadisk is not empty !"
                        echo
                      read
                        reboot
                        while ( true ); do
                                sleep 3600
                        done
                fi

		source /tmp/.pre-network
		cat >> /tmp/partitions <<EOF
		part pv.2 --grow --onpart ${DATADISK}
		volgroup vg_${HNAME}_data pv.2 
		logvol /opt --size 1 --grow --fstype=xfs --name lvopt --vgname vg_${HNAME}_data
EOF
	
	else
		cat >> /tmp/partitions <<EOF
		logvol /opt --size 2048 --fstype=xfs --name lvopt --vgname vg_${HNAME}
EOF
	fi
else
	cat >> /tmp/partitions <<EOF
	logvol /opt --size=20480 --fstype=xfs --name=lvopt --vgname=vg_${HNAME}
EOF
fi

echo "* Partition table:"
cat /tmp/partitions

echo "* Remove grub"
dd if=/dev/zero of=/dev/${FIRSTDISK} bs=446 count=1

echo "* Set the time correct"
CDATE=$(curl -k -# "https://${IP_SATELLITE}/cgi-bin/tellmethetime.cgi" | sed 's/.* //')
date -u "$CDATE"
echo -e "\t - My time    : $(date '+%m%d%k%M%Y.%S') "
echo -e "\t - Remote time: ${CDATE}"
hwclock --systohc


chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

%end

%post --nochroot
mkdir /mnt/sysimage/tmp/ks-tree-copy
if [ -d /oldtmp/ks-tree-shadow ]; then
cp -fa /oldtmp/ks-tree-shadow/* /mnt/sysimage/tmp/ks-tree-copy
elif [ -d /tmp/ks-tree-shadow ]; then
cp -fa /tmp/ks-tree-shadow/* /mnt/sysimage/tmp/ks-tree-copy
fi
cp /etc/resolv.conf /mnt/sysimage/etc/resolv.conf
cp -f /tmp/ks-pre.log* /mnt/sysimage/root/ || :

%end

%post --nochroot --interpreter /usr/bin/python
try:
    import xmlrpclib
    import shutil
    import sys
    import os.path
    old_system_id = "/tmp/rhn/systemid"
    new_system_id = "/mnt/sysimage/root/systemid.old"
    tmp_key = "/mnt/sysimage/tmp/key"

    new_keys = "1-boebah,1-redhat7-key"
    for key in new_keys.split(','):
        if key.startswith('re-'):
            sys.exit(0)
    if os.path.exists(old_system_id):
        client =  xmlrpclib.Server("http://bla.bla/rpc/api")
        key = client.system.obtain_reactivation_key(open(old_system_id).read())
        if os.path.exists(tmp_key):
            f = open(tmp_key, "r+")
            contents = f.read()
            if contents and not contents[-1] == ',':
                f.write(',')
        else:
            f = open(tmp_key, "w")
        f.write(key)
        f.close()
        shutil.copy(old_system_id, new_system_id)
except:
    # xml rpc due to  a old/bad system id
    # we don't care about those
    # we'll register those as new.
    pass


%end

%post --log /root/ks-rhn-post.log
# --Begin Red Hat Satellite command section--
cat > /tmp/ssl-key-1 <<'EOF'
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            c5:bc:fc:ea:76:0c:90:dd
        Signature Algorithm: sha1WithRSAEncryption
        Issuer: C=NL, ST=South Holland, L=Luttjebroek, O=KimHolland, OU=Grote DD, CN=blabla.bla
        Validity
            Not Before: Jul  3 20:50:17 2013 GMT
            Not After : Jun 27 20:50:17 2036 GMT
        Subject: C=NL, ST=South Holland, L=Luttjebroek, O=KimHolland, OU=Grote DD, CN=blabla.bla
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                  key.........
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:TRUE
            X509v3 Key Usage: 
                Digital Signature, Key Encipherment, Certificate Sign
            X509v3 Extended Key Usage: 
                TLS Web Server Authentication, TLS Web Client Authentication
            Netscape Comment: 
                RHN SSL Tool Generated Certificate
            X509v3 Subject Key Identifier: 
                ED:50:2A:E1:5A:40:13:E0:D6:D6:23:02:49:44:68:44:C9:5F:2C:2F
            X509v3 Authority Key Identifier: 
                keyid:ED:50:2A:E1:5A:40:13:E0:D6:D6:23:02:49:44:68:44:C9:5F:2C:2F
                DirName:/C=NL/ST=South Holland/L=Den Haag/O=ING verzkerning NV/OU=IT Hosting/CN=srtafinf0004.insim.biz
                serial:C5:BC:FC:EA:76:0C:90:DD

    Signature Algorithm: sha1WithRSAEncryption
      key 
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----

EOF
# ssl-key1
cat /tmp/ssl-key-* > /usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT
perl -pe 's/RHNS-CA-CERT/RHN-ORG-TRUSTED-SSL-CERT/g' -i /etc/sysconfig/rhn/up2date

mkdir -p /tmp/rhn_rpms/optional
cd /tmp/rhn_rpms/optional 
wget -P /tmp/rhn_rpms/optional http://bla.bla/download/package/36f989d149a72b88f49c4b8b574864f856a8aa23/0/363/94861/pyOpenSSL-0.13.1-3.el7.x86_64.rpm http://srtafinf0004.insim.biz/download/package/2bfb76c1a7ef137ac3ce5d4b40c4db8220cb0ef6/0/363/90349/libxml2-2.9.1-6.el7_2.3.x86_64.rpm http://srtafinf0004.insim.biz/download/package/dcda5c07749b64dfbb68273295e605b318311b92/0/363/90352/libxml2-python-2.9.1-6.el7_2.3.x86_64.rpm http://srtafinf0004.insim.biz/download/package/abf04f4f6ff570426e9743e5b7860a0c335375aa/0/363/95850/rhnlib-2.5.65-2.el7.noarch.rpm 
rpm -Uvh --replacepkgs --replacefiles /tmp/rhn_rpms/optional/pyOpenSSL* /tmp/rhn_rpms/optional/rhnlib* /tmp/rhn_rpms/optional/libxml2-python* /tmp/rhn_rpms/optional/libxml2* 
perl -npe 's|^(\s*(noSSLS\|s)erverURL\s*=\s*[^:]+://)[^/]*/|${1}bla.bla/|' -i /etc/sysconfig/rhn/up2date
mkdir -p /etc/sysconfig/rhn/allowed-actions/script
touch /etc/sysconfig/rhn/allowed-actions/script/run
mkdir -p /etc/sysconfig/rhn/allowed-actions/configfiles
touch /etc/sysconfig/rhn/allowed-actions/configfiles/all

# now copy from the ks-tree we saved in the non-chroot checkout
cp -fav /tmp/ks-tree-copy/* / 2>/dev/null
rm -Rf /tmp/ks-tree-copy
# --End Red Hat Satellite command section--

# begin cobbler snippet

# Start post_install_network_config generated code
# End post_install_network_config generated code

# set default MOTD
echo "Kickstarted on $(date +'%Y-%m-%d')" >> /etc/motd

# begin Red Hat management server registration
mkdir -p /usr/share/rhn/
wget http://srtafinf0004.insim.biz/pub/RHN-ORG-TRUSTED-SSL-CERT -O /usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT   
perl -Xnpe 's/RHNS-CA-CERT/RHN-ORG-TRUSTED-SSL-CERT/g' -i /etc/sysconfig/rhn/*  
if [ -f /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release ]; then
    rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
fi
key=1-244570f90bdc70144d16a50bfc1f3990,1-redhat7-key
if [ -f /tmp/key ]; then
    key=`cat /tmp/key`,$key
fi

rhnreg_ks --serverUrl=https://bla.bla/XMLRPC --sslCACert=/usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT --activationkey=$key
# end Red Hat management server registration

# end cobbler snippet

rhn_check
%end


%post --nochroot
source /tmp/.pre-network
cp /tmp/.pre-network /mnt/sysimage/root/.pre-network
echo ${ACTIVATIONKEYS} > /mnt/sysimage/tmp/key
if [ -n "$MGTGW" ]; then
	echo "* Configuring Management Interface ($MGTIF)"
/bin/nmcli con add type ethernet con-name ${MGTIF} ifname ${MGTIF} ipv4 ${MGTIP}/${MGTMSK} gw4 ${MGTGW}
/bin/nmcli con mod ${MGTIF} connection.autoconnect yes
echo "10.10.10.0/23 via ${MGTGW} dev ${MGTIF}" >> /tmp/route-${MGTIF}
echo "10.10.10.0/25 via ${MGTGW} dev ${MGTIF}" >> /tmp/route-${MGTIF}
echo "10.10.10.0/27 via ${MGTGW} dev ${MGTIF}" >> /tmp/route-${MGTIF}
echo "10.10.10.0/25 via ${MGTGW} dev ${MGTIF}" >> /tmp/route-${MGTIF}
cp /tmp/route-${MGTIF} /mnt/sysimage/etc/sysconfig/network-scripts/
else
echo "No management"
fi


echo "* Configuring Server Interface ($SRVIF)"
/bin/nmcli con add type ethernet con-name ${SRVIF} ifname ${SRVIF} ipv4 ${SRVIP}/${SRVMSK} gw4  ${SRVGW}
/bin/nmcli con mod ${SRVIF} ipv4.dns "10.10.10.0"
/bin/nmcli con mod ${SRVIF} connection.autoconnect yes
/bin/nmcli con mod ${SRVIF}  ipv4.dns-search "bla.bla"
/bin/nmcli con mod eth2 connection.autoconnect no
/bin/hostnamectl set-hostname ${HNAME}
cp -p /etc/sysconfig/network-scripts/ifcfg-* /mnt/sysimage/etc/sysconfig/network-scripts/
cp -p /etc/hostname /mnt/sysimage/etc/


######
cat << EOF >> /mnt/sysimage/etc/modprobe.d/CIS.conf
install cramfs /bin/true
install freevxfs /bin/true
install jffs2 /bin/true
install hfs /bin/true
install hfsplus /bin/true
install squashfs /bin/true
install udf /bin/true
install dccp /bin/true
install sctp /bin/true
install rds /bin/true
install tipc /bin/true
EOF
#####
echo umask 027 >> /mnt/sysimage/etc/sysconfig/init
####
sed -i 's/ADUSER=\(.*\)/#ADUSER=\1/' /mnt/sysimage/root/.pre-network
sed -i 's/ADPASSWD=.*/#ADPASSWD=/g' /mnt/sysimage/root/.pre-network


%end

%post --interpreter /bin/bash --log /root/ks-post.log.1
echo "snipp-aide"
/usr/sbin/aide --init
/bin/mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
echo "end snipp-aide"
echo "snipp-aide"
/usr/sbin/aide --init
/bin/mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
echo "end snipp-aide"

source /root/.pre-network

DTAP=$(hostname | cut -c3 | tr [a-z] [A-Z])
TENANT=$(hostname | cut -c4-5 | tr [a-z] [A-Z])
yum -y -d2 install 'pciutils' 'virt-what' 'system-logos' 'which' 'libxml2' 'dmidecode' 'cronie' 'net-tools' 'puppet' --nogpgcheck

#Generate the puppet configuration
puppetconfig=/etc/puppet/puppet.conf
detect_env=$(/bin/hostname |/bin/awk '{print toupper(substr($0,3,1))}')

#Clean old puppet.conf
rm -rf $puppetconfig

case "$detect_env" in
   D)
        environment=development
        ;;
   T)
        environment=testing
        ;;
   A)
        environment=acceptance
        ;;
   P)
        environment=production
        ;;
esac
# Detect hostname for certificate
hostname=$(hostname)

##For opensource Puppet
#############################
echo "[main]" >> $puppetconfig
    # The Puppet log directory.
    # The default value is '$vardir/log'.
echo " logdir = /var/log/puppet" >> $puppetconfig
    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
echo  " rundir = /var/run/puppet" >> $puppetconfig

    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
echo 'ssldir = $vardir/ssl' >> $puppetconfig

echo "certname = $hostname" >> $puppetconfig
echo  "server = puppet.insim.biz" >> $puppetconfig

echo "[agent] "  >> $puppetconfig
echo  "report = true " >> $puppetconfig
echo  ' classfile = $vardir/classes.txt '  >> $puppetconfig
echo " localconfig = $vardir/localconfig" >> $puppetconfig
echo " graph = true" >> $puppetconfig
echo " pluginsync = true" >> $puppetconfig
echo " environment = $environment" >> $puppetconfig

# Change ownership and permissions
chmod 600 /etc/puppet/puppet.conf
chown puppet:puppet /etc/puppet/puppet.conf

# Make sure puppet will run after a reboot
systemctl enable puppet

# Do a first puppet run
#/usr/bin/puppet agent -t

#raw end
echo "* Update all packages"
echo "* Update all packages" >> /root/install.log
yum clean all
yum -y update >> /root/install.log
yum -y update rhn-client-tools
yum clean all


%end

%post


# Start koan environment setup
echo "export COBBLER_SERVER=bla.bla" > /etc/profile.d/cobbler.sh
echo "setenv COBBLER_SERVER bla.bla" > /etc/profile.d/cobbler.csh
# End koan environment setup



wget "http://bla.bla/cblr/svc/op/ks/profile/rhel-x86_64-server-7:1" -O /root/cobbler.ks
wget "http://bla.bla/cblr/svc/op/trig/mode/post/profile/rhel-x86_64-server-7:1" -O /dev/null
%end
